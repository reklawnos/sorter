{"version":3,"sources":["components/Sorter.js","components/OptionsInput.js","components/App.js","serviceWorker.js","index.js"],"names":["mergeSort","_callee","arr","compare","splitPoint","a","b","regenerator_default","wrap","_context","prev","next","length","abrupt","Math","floor","slice","sent","merge","stop","this","_callee2","result","indexA","indexB","_context2","push","OptionButton","_ref","onPress","children","react_default","createElement","className","onClick","Sorter","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onKeyPress","e","currentComparison","state","key","completeComparison","optionA","optionB","Promise","resolve","setState","onSelect","option","_this$state$currentCo","_this$props","options","onRankingComplete","window","addEventListener","then","removeEventListener","_this2","Component","OptionsInput","onTextChanged","inputText","target","value","onSubmit","onChange","App","onTextSubmit","text","split","rankedOptions","_this$state","components_OptionsInput","components_Sorter","map","i","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f159a81.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nasync function mergeSort(arr, compare) {\n  if (arr.length <= 1) {\n    return arr;\n  }\n  const splitPoint = Math.floor(arr.length / 2);\n  const a = await mergeSort(arr.slice(0, splitPoint), compare);\n  const b = await mergeSort(arr.slice(splitPoint), compare);\n  return merge(a, b, compare);\n}\n\nasync function merge(a, b, compare) {\n  const result = [];\n  let indexA = 0;\n  let indexB = 0;\n  while (indexA < a.length || indexB < b.length) {\n    if (indexB === b.length) {\n      result.push(a[indexA]);\n      indexA += 1;\n      continue;\n    }\n    if (indexA === a.length) {\n      result.push(b[indexB]);\n      indexB += 1;\n      continue;\n    }\n\n    const comparison = await compare(a[indexA], b[indexB]);\n    if (comparison <= 0) {\n      result.push(a[indexA]);\n      indexA += 1;\n    } else {\n      result.push(b[indexB]);\n      indexB += 1;\n    }\n  }\n  return result;\n}\n\nfunction OptionButton({ onPress, children }) {\n  return (\n    <div className=\"option-button--container\">\n      <button onClick={onPress} className=\"option-button--button\">\n        {children}\n      </button>\n    </div>\n  );\n}\n\nclass Sorter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentComparison: null,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      options,\n      onRankingComplete,\n    } = this.props;\n    window.addEventListener('keydown', this.onKeyPress);\n    mergeSort(options, this.compare).then(onRankingComplete);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.onKeyPress);\n  }\n\n  onKeyPress = (e) => {\n    const { currentComparison } = this.state;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        this.completeComparison(currentComparison.optionA);\n        break;\n      case 'ArrowRight':\n        this.completeComparison(currentComparison.optionB);\n        break;\n      default:\n    }\n  };\n\n  compare = (a, b) => {\n    return new Promise((resolve) => {\n      this.setState({\n        currentComparison: {\n          optionA: a,\n          optionB: b,\n          onSelect: resolve,\n        },\n      })\n    });\n  };\n\n  completeComparison = (option) => {\n    const {\n      currentComparison: {\n        optionA,\n        onSelect,\n      },\n    } = this.state;\n    onSelect(option === optionA ? -1 : 1);\n    this.setState({ currentComparison: null });\n  };\n\n  render() {\n    const { currentComparison } = this.state;\n    return currentComparison !== null && (\n      <div>\n        <OptionButton\n          onPress={() => this.completeComparison(currentComparison.optionA)}\n        >\n          {currentComparison.optionA}\n        </OptionButton>\n        <OptionButton\n          onPress={() => this.completeComparison(currentComparison.optionB)}\n        >\n          {currentComparison.optionB}\n        </OptionButton>\n      </div>\n    );\n  }\n}\n\nexport default Sorter;\n","import React, { Component } from 'react';\n\nclass OptionsInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputText: '',\n    };\n  }\n\n  onTextChanged = (e) => {\n    this.setState({ inputText: e.target.value });\n  };\n\n  onSubmit = () => {\n    this.props.onSubmit(this.state.inputText);\n  };\n\n  render() {\n    const { inputText } = this.state;\n    return (\n      <div>\n        <textarea\n          value={inputText}\n          onChange={this.onTextChanged}\n          className=\"options-input\"\n        />\n        <div className=\"start-button-container\">\n          <button onClick={this.onSubmit}>\n            Start\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default OptionsInput;\n","import React, { Component } from 'react';\nimport Sorter from './Sorter';\nimport OptionsInput from './OptionsInput';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: null,\n      result: null,\n    };\n  }\n\n  onTextSubmit = (text) => {\n    this.setState({ options: text.split('\\n') });\n  };\n\n  onRankingComplete = (rankedOptions) => {\n    this.setState({ result: rankedOptions });\n  };\n\n  render() {\n    const { options, result } = this.state;\n    return (\n      <div>\n        {!options &&\n          <OptionsInput onSubmit={this.onTextSubmit} />\n        }\n        {options && !result &&\n          <Sorter\n            options={options}\n            onRankingComplete={this.onRankingComplete}\n          />\n        }\n        {result &&\n          <div className=\"result-list\">\n            {result.map((result, i) => (\n              <div key={i}>\n                {result}\n              </div>\n            ))}\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}